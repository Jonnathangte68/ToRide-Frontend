import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchLogin } from './authAPI';

interface LoginForm {
  username: string;
  password: string;
}

export interface UserOwnerElement {
  password: string;
  email: string;
  is_owner: boolean;
}

export interface AuthState {
  authStatus: 'idle' | 'success' | 'error';
  user: string;
  valueStored: string;
}

const initialState: AuthState = {
    authStatus: 'idle',
    user: "",
    valueStored: ""
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const authorizeUserAsync = createAsyncThunk(
  'auth/fetchLogin',
  async (credentials: LoginForm) => {
    const {username, password} = credentials
    const response = await fetchLogin(username, password);
    return { ...response, username };
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    testPersistenStoring: (state, action: PayloadAction<string>) => {
      state.valueStored = action.payload;
    },
    logout: (state) => {
      state.authStatus = 'idle';
      state.user = "";
      state.valueStored = "";
    },
    /*
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
    */
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authorizeUserAsync.pending, (state) => {
        state.authStatus = 'idle';
        state.user = "";
      })
      .addCase(authorizeUserAsync.fulfilled, (state, action) => {
        console.log("on authorize");
        state.authStatus = 'success';
        state.user = action.payload.username;
      })
      .addCase(authorizeUserAsync.rejected, (state) => {
        state.authStatus = 'error';
        state.user = "";
      });
  },
});

export const { logout, testPersistenStoring } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;
export const getUser = (state: RootState) => state.auth.user;
export const getValueStored = (state: RootState) => state.auth.valueStored;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default authSlice.reducer;
